#!/usr/bin/perl
use warnings;
use strict;

use Symbol qw(gensym);
use HTTP::Response;

use File::Spec;
use URI::Escape;
use Digest::MD5 qw(md5_hex);
use POSIX;

use Conf;

my $conf= Conf->new(
    './ogg.conf',
    {
        basedir    => sub { my $v= Cwd::abs_path(shift); $v=~ s/\/$//; $v },
        tempdir    => sub { my $v= Cwd::abs_path(shift); $v=~ s/\/$//; $v },
        tempcount  => 20,
        redirectbase => undef,
        port       => 8081,
    }
);

my $port= $conf->get('port');

sub buildInFileName {
        my $reqFile= shift;
        return File::Spec->catfile($conf->get('basedir'), $reqFile);
}

sub buildOutFileName {
        my $reqFile= shift;
        return File::Spec->catfile($conf->get('tempdir'), md5_hex($reqFile) . '.ogg');
}

sub buildTheoraCommand {
        my $sFile= shift || '';
        my $sOutFile= shift || 'tmp';
        my $sTmpFile= "$sOutFile.tmp";
        $sFile=~ s/\\/\\\\/g;
        $sFile=~ s/\"/\\\"/g;
#        return 'ffmpeg -i "' . $sFile . '" -vn -acodec libmp3lame -aq 6 "' . $sTmpFile . '" && mv "' . $sTmpFile . '" "' . $sOutFile . '"';
        return 'ffmpeg2theora --novideo --output "' . $sTmpFile . '" "' . $sFile . '" && mv "' . $sTmpFile . '" "' . $sOutFile . '"';
}

sub cleanupDir {
    # read temp dir and delete oldest files if more than configured in "tempcount"
    my $dh;
    my $dir= $conf->get('tempdir');
    opendir($dh, $dir) or die "Temp dir '$dir' does not exist!";
    my %files= map { (stat)[9] => $_ } grep { -f } map { "$dir/$_" } readdir $dh;
    closedir $dh;
    my @keys= sort {$b <=> $a} keys %files;
    splice @keys, 0, $conf->get('tempcount');
    unlink $files{$_} for (@keys);
}

# Include POE, POE::Component::Server::TCP, and the filters necessary
# to stream web content.
use POE qw(Component::Server::TCP Filter::HTTPD Filter::Stream);


sub closeConnection {
    my ($kernel, $heap)= @_;
    if ($heap->{pid}) {
        kill SIGINT, $heap->{pid};
        waitpid $heap->{pid}, 0;
        delete $heap->{pid};
    }
    delete $heap->{file_name};
    delete $heap->{stream_fh};
    $kernel->yield("shutdown");
}

sub pidRunning {
    my $heap= shift;
    my $pid= $heap->{pid};
    return 0 unless $pid;
    return 1 if kill SIGCHLD, $pid;
    waitpid $pid, 0;
    delete $heap->{pid};
    return 0;
}


# Spawn a web server on port 8081 of all interfaces.
POE::Component::Server::TCP->new(
    Alias                => "web_server",
    Port                 => $port,
    ClientFilter => 'POE::Filter::HTTPD',

    ClientDisconnected => sub {
        my ($kernel, $heap) = @_[KERNEL, HEAP];
        closeConnection($kernel, $heap);
    },

    # Output has been flushed to the client.    If the output was
    # headers, open and begin streaming content.    Otherwise continue
    # streaming content until it has all been sent.    An error, such as
    # when the user stops a transfer, will also halt the stream.
    ClientFlushed => sub {
        my ($kernel, $heap) = @_[KERNEL, HEAP];

        waitpid(-1, WNOHANG);

        # The first flush means that headers were sent.    Open the file
        # to be streamed, and switch to POE's Stream filter.    This
        # allows the content to pass through POE without being changed.
        unless ($heap->{stream_fh}) {
            my $file_handle = $heap->{stream_fh} = gensym();
            my $file_name= $heap->{file_name};

            unless ($file_name && -r $file_name) {
                return closeConnection($kernel, $heap);
            }
            unless (open($file_handle, "<", $file_name)) {
                return closeConnection($kernel, $heap);
            }

            # So that DOS-like systems do not perform ASCII transfers.
            binmode($file_handle);
            $heap->{client}->set_output_filter(POE::Filter::Stream->new());
        }

        # If a chunk of the streaming file can be read, send it to the
        # client.    Otherwise close the file and shut down.
        my $bytes_read = 0;
        my $buffer= '';
        # wait for data while process is running
        my $i= 0;
        while ($bytes_read == 0) {
            $bytes_read= sysread($heap->{stream_fh}, $buffer, 4096);
            last unless pidRunning $heap;
            last if $bytes_read;
# print "underrun (" . ++$i . ")...\n";
            sleep 1;
        }
        if ($bytes_read) {
            $heap->{client}->put($buffer);
        }
        else {
            closeConnection($kernel, $heap);
        }
    },

    # A request has been received from the client.    We ignore its
    # content, but the server could be expanded to stream different
    # files based on what was asked here.
    ClientInput => sub {
        my ($kernel, $heap, $request) = @_[KERNEL, HEAP, ARG0];

        # Filter::HTTPD sometimes generates HTTP::Response objects.
        # They indicate (and contain the response for) errors.    It's
        # easiest to send the responses as they are and finish up.
        if ($request->isa("HTTP::Response")) {
            $heap->{client}->put($request);
            $kernel->yield("shutdown");
            return;
        }

        my $sReqFile= uri_unescape $request->uri->path;
        my $sInFile= buildInFileName($sReqFile);
        unless (-f $sInFile) {
            my $response = HTTP::Response->new(404);
            $response->content("Could not find file '$sReqFile'");
            $heap->{client}->put($response);
            return;
        }
        my $sOutFile= buildOutFileName($sReqFile);
        $heap->{file_name}= $sOutFile;
        if (-f $sOutFile) {
            `touch "$sOutFile"`;
            my $sRedirectBase= $conf->get('redirectbase');
            if ($sRedirectBase) {
                my $response = HTTP::Response->new(303);
                my $sBaseName= $sOutFile;
                $sBaseName=~ s/.*\///;
                my $sLocation= "$sRedirectBase/$sBaseName";
                $response->push_header('Location', $sLocation);
                $heap->{client}->put($response);
                delete $heap->{file_name};
                print "Redirecting to '$sLocation'\n";
                return;
            }
            print "Serving cached file '$sOutFile'\n";
        }
        else {
            cleanupDir;
            my $sTempFile= "$sOutFile.tmp";
            unlink $sTempFile if -f $sTempFile;
            my $cmd= buildTheoraCommand($sInFile, $sOutFile);
            my $pid= fork();
            if ($pid == 0) {
                exec $cmd;
            }
            $heap->{pid}= $pid;
            $heap->{file_name}= $sTempFile;

            # wait for file to be created
            sleep 1 while pidRunning($heap) && (! -r $sTempFile);
        }

        # The request is real and fully formed.    Create and send back
        # headers in preparation for streaming the music.
        my $response = HTTP::Response->new(200);
        $response->push_header('Content-type', 'audio/ogg');
        $heap->{client}->put($response);

        # Note that we do not shut down here.    Once the response's
        # headers are flushed, the ClientFlushed callback will begin
        # streaming the actual content.
    }
);

print "running encoding server on port $port\n";
# Start POE. This will run the server until it exits.
$poe_kernel->run();
exit 0;

